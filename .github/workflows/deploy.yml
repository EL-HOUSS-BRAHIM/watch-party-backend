name: 🚀 Deploy to Production

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'update'
        type: choice
        options:
        - update
        - fresh_setup
        - full_rebuild
      skip_tests:
        description: 'Skip tests during deployment'
        required: false
        default: false
        type: boolean

env:
  # Server connection details (from secrets)
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}
  
  # Database configuration (from secrets)
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT || '5432' }}
  
  # Redis configuration (from secrets)
  REDIS_URL: ${{ secrets.REDIS_URL }}
  REDIS_HOST: ${{ secrets.REDIS_HOST || 'localhost' }}
  REDIS_PORT: ${{ secrets.REDIS_PORT || '6379' }}
  
  # Django settings (from secrets)
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: ${{ secrets.DEBUG || 'False' }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  
  # Email configuration (from secrets)
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT || '587' }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS || 'True' }}
  
  # Security and external services (from secrets)
  CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
  CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
  
  # Social auth (from secrets)
  GOOGLE_OAUTH2_KEY: ${{ secrets.GOOGLE_OAUTH2_KEY }}
  GOOGLE_OAUTH2_SECRET: ${{ secrets.GOOGLE_OAUTH2_SECRET }}
  GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
  GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
  
  # AWS settings (from secrets)
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
  
  # Additional settings
  ENVIRONMENT: 'production'
  DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type || 'update' }}

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      commit_sha: ${{ steps.check.outputs.commit_sha }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Validate secrets
      id: check
      run: |
        echo "🔍 Validating required secrets..."
        
        # Check required secrets
        REQUIRED_SECRETS=(
          "DEPLOY_HOST"
          "DEPLOY_USER" 
          "SSH_PRIVATE_KEY"
          "SECRET_KEY"
          "DATABASE_URL"
        )
        
        MISSING_SECRETS=()
        
        if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then MISSING_SECRETS+=("DEPLOY_HOST"); fi
        if [ -z "${{ secrets.DEPLOY_USER }}" ]; then MISSING_SECRETS+=("DEPLOY_USER"); fi
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then MISSING_SECRETS+=("SSH_PRIVATE_KEY"); fi
        if [ -z "${{ secrets.SECRET_KEY }}" ]; then MISSING_SECRETS+=("SECRET_KEY"); fi
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then MISSING_SECRETS+=("DATABASE_URL"); fi
        
        if [ ${#MISSING_SECRETS[@]} -ne 0 ]; then
          echo "❌ Missing required secrets: ${MISSING_SECRETS[*]}"
          echo "Please add these secrets to your repository settings."
          exit 1
        fi
        
        echo "✅ All required secrets are present"
        echo "should_deploy=true" >> $GITHUB_OUTPUT
        echo "commit_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  # Run tests (optional)
  run-tests:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_watchparty
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run tests
      env:
        DEBUG: 'True'
        SECRET_KEY: 'test-key-for-ci'
        DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_watchparty'
        REDIS_URL: 'redis://localhost:6379/0'
      run: |
        echo "🧪 Running Django tests..."
        python manage.py test --verbosity=2

  # Deploy to production
  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, run-tests]
    if: always() && needs.pre-deployment-checks.outputs.should_deploy == 'true' && (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔑 Setup SSH key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "🔑 Setting up SSH key..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p $DEPLOY_PORT -H $DEPLOY_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
    
    - name: 🧪 Test SSH connection
      run: |
        echo "🧪 Testing SSH connection..."
        ssh -p $DEPLOY_PORT -o ConnectTimeout=10 -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful!'"
    
    - name: 📤 Upload code to server
      run: |
        echo "📤 Uploading code to server..."
        
        # Create deployment directory on server
        ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
          sudo mkdir -p /var/www/watchparty
          sudo chown -R $DEPLOY_USER:$DEPLOY_USER /var/www/watchparty
        "
        
        # Sync code to server (excluding sensitive files)
        rsync -avz -e "ssh -p $DEPLOY_PORT" \
          --exclude='.git' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          --exclude='.env*' \
          --exclude='staticfiles' \
          --exclude='media' \
          --exclude='logs/*.log' \
          --delete \
          ./ $DEPLOY_USER@$DEPLOY_HOST:/var/www/watchparty/
    
    - name: 🔧 Create production environment file
      run: |
        echo "🔧 Creating production environment file..."
        
        # Create .env file with all secrets
        ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
          cd /var/www/watchparty
          
          # Create production .env file
          cat > .env << 'EOF'
        # =============================================================================
        # WATCH PARTY BACKEND - PRODUCTION ENVIRONMENT
        # =============================================================================
        # Generated by GitHub Actions on $(date)
        # Commit: ${{ github.sha }}
        
        # Environment
        ENVIRONMENT=production
        DEBUG=$DEBUG
        
        # Security
        SECRET_KEY=$SECRET_KEY
        ALLOWED_HOSTS=$ALLOWED_HOSTS
        CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS
        CSRF_TRUSTED_ORIGINS=$CSRF_TRUSTED_ORIGINS
        
        # Database
        DATABASE_URL=$DATABASE_URL
        DATABASE_HOST=$DATABASE_HOST
        DATABASE_NAME=$DATABASE_NAME
        DATABASE_USER=$DATABASE_USER
        DATABASE_PASSWORD=$DATABASE_PASSWORD
        DATABASE_PORT=$DATABASE_PORT
        
        # Redis
        REDIS_URL=$REDIS_URL
        REDIS_HOST=$REDIS_HOST
        REDIS_PORT=$REDIS_PORT
        
        # Celery
        CELERY_BROKER_URL=$REDIS_URL
        CELERY_RESULT_BACKEND=$REDIS_URL
        
        # Email
        EMAIL_HOST=$EMAIL_HOST
        EMAIL_PORT=$EMAIL_PORT
        EMAIL_HOST_USER=$EMAIL_HOST_USER
        EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
        EMAIL_USE_TLS=$EMAIL_USE_TLS
        
        # Social Authentication
        GOOGLE_OAUTH2_KEY=$GOOGLE_OAUTH2_KEY
        GOOGLE_OAUTH2_SECRET=$GOOGLE_OAUTH2_SECRET
        GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID
        GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET
        
        # AWS (if using)
        AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME
        AWS_S3_REGION_NAME=$AWS_S3_REGION_NAME
        
        # Additional production settings
        SECURE_SSL_REDIRECT=True
        SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
        SESSION_COOKIE_SECURE=True
        CSRF_COOKIE_SECURE=True
        SECURE_BROWSER_XSS_FILTER=True
        SECURE_CONTENT_TYPE_NOSNIFF=True
        EOF
          
          # Secure the environment file
          chmod 600 .env
        "
    
    - name: 🛠️ Setup/Update production server
      run: |
        echo "🛠️ Setting up production server..."
        
        ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
          cd /var/www/watchparty
          
          # Make scripts executable
          chmod +x manage.sh
          chmod +x scripts/*.sh
          
          # Run appropriate setup based on deployment type
          case '$DEPLOYMENT_TYPE' in
            'fresh_setup')
              echo '🆕 Running fresh server setup...'
              sudo ./manage.sh prod-setup --fresh
              ;;
            'full_rebuild')
              echo '🔄 Running full rebuild...'
              sudo ./manage.sh prod-stop || true
              sudo ./manage.sh clean
              sudo ./manage.sh prod-setup --rebuild
              ;;
            'update'|*)
              echo '⬆️ Running server update...'
              # Check if production services exist
              if sudo systemctl list-units --type=service | grep -q watchparty; then
                sudo ./manage.sh prod-restart
              else
                echo 'No existing services found, running fresh setup...'
                sudo ./manage.sh prod-setup
              fi
              ;;
          esac
        "
    
    - name: 🔍 Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST "
          cd /var/www/watchparty
          
          # Run health checks
          ./manage.sh check
          ./manage.sh prod-status
          
          # Test application endpoints
          echo '🌐 Testing application endpoints...'
          
          # Wait for services to start
          sleep 10
          
          # Check if Django is responding
          if curl -f -s http://localhost:8000/health/ > /dev/null; then
            echo '✅ Django application is responding'
          else
            echo '⚠️ Django application health check failed'
            ./manage.sh prod-logs --tail 50
          fi
          
          # Check nginx if configured
          if sudo systemctl is-active --quiet nginx; then
            echo '✅ Nginx is running'
            if curl -f -s http://localhost/ > /dev/null; then
              echo '✅ Nginx is serving content'
            else
              echo '⚠️ Nginx is not serving content properly'
            fi
          else
            echo 'ℹ️ Nginx not configured or not running'
          fi
        "
    
    - name: 📊 Deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Type**: $DEPLOYMENT_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Server**: $DEPLOY_HOST" >> $GITHUB_STEP_SUMMARY
        echo "- **User**: $DEPLOY_USER" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed!" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application logs: \`./manage.sh prod-logs\`" >> $GITHUB_STEP_SUMMARY
        echo "- Check service status: \`./manage.sh prod-status\`" >> $GITHUB_STEP_SUMMARY
        echo "- Run health checks: \`./manage.sh check\`" >> $GITHUB_STEP_SUMMARY

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    
    steps:
    - name: 📧 Notify deployment failure
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the workflow logs and server status."
        # Add notification logic here (email, Slack, etc.)
