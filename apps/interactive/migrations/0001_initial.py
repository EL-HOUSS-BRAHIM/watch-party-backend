# Generated by Django 5.0.14 on 2025-07-20 16:42

import datetime
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("parties", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="InteractivePoll",
            fields=[
                (
                    "poll_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question", models.TextField(help_text="Poll question")),
                (
                    "poll_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("text", "Text Response"),
                            ("rating", "Rating Scale"),
                            ("yes_no", "Yes/No"),
                        ],
                        default="multiple_choice",
                        max_length=20,
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        default=list, help_text="Poll options for multiple choice"
                    ),
                ),
                (
                    "min_rating",
                    models.IntegerField(default=1, help_text="Minimum rating value"),
                ),
                (
                    "max_rating",
                    models.IntegerField(default=5, help_text="Maximum rating value"),
                ),
                (
                    "allows_multiple",
                    models.BooleanField(
                        default=False, help_text="Allow multiple selections"
                    ),
                ),
                (
                    "video_timestamp",
                    models.FloatField(
                        blank=True,
                        help_text="Video timestamp when poll was created",
                        null=True,
                    ),
                ),
                ("expires_at", models.DateTimeField(help_text="When the poll expires")),
                ("is_published", models.BooleanField(default=False)),
                ("total_responses", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_polls",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactive_polls",
                        to="parties.watchparty",
                    ),
                ),
            ],
            options={
                "db_table": "interactive_polls",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="InteractiveSession",
            fields=[
                (
                    "session_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("reactions_sent", models.IntegerField(default=0)),
                (
                    "voice_chat_duration",
                    models.DurationField(default=datetime.timedelta),
                ),
                ("screen_shares_initiated", models.IntegerField(default=0)),
                ("polls_participated", models.IntegerField(default=0)),
                ("annotations_created", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactive_sessions",
                        to="parties.watchparty",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactive_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "interactive_sessions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="LiveReaction",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "reaction",
                    models.CharField(
                        choices=[
                            ("laugh", "Laugh üòÇ"),
                            ("love", "Love ‚ù§Ô∏è"),
                            ("surprise", "Surprise üòÆ"),
                            ("cry", "Cry üò¢"),
                            ("angry", "Angry üò†"),
                            ("thumbs_up", "Thumbs Up üëç"),
                            ("thumbs_down", "Thumbs Down üëé"),
                            ("fire", "Fire üî•"),
                            ("clap", "Clap üëè"),
                            ("mind_blown", "Mind Blown ü§Ø"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "position_x",
                    models.FloatField(help_text="X position on screen (0-1)"),
                ),
                (
                    "position_y",
                    models.FloatField(help_text="Y position on screen (0-1)"),
                ),
                (
                    "video_timestamp",
                    models.FloatField(
                        help_text="Video timestamp when reaction was made"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="live_reactions",
                        to="parties.watchparty",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="live_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "interactive_live_reactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PollResponse",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "selected_option",
                    models.IntegerField(
                        blank=True, help_text="Index of selected option", null=True
                    ),
                ),
                (
                    "text_response",
                    models.TextField(
                        blank=True, help_text="Text response for text polls"
                    ),
                ),
                (
                    "rating_value",
                    models.IntegerField(
                        blank=True, help_text="Rating value for rating polls", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="interactive.interactivepoll",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "interactive_poll_responses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ScreenShare",
            fields=[
                (
                    "share_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Screen share title", max_length=255),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "share_type",
                    models.CharField(
                        choices=[
                            ("screen", "Full Screen"),
                            ("window", "Application Window"),
                            ("tab", "Browser Tab"),
                        ],
                        default="screen",
                        max_length=10,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        default="1920x1080",
                        help_text="Resolution (e.g., 1920x1080)",
                        max_length=20,
                    ),
                ),
                (
                    "frame_rate",
                    models.IntegerField(default=30, help_text="Frames per second"),
                ),
                ("viewer_count", models.IntegerField(default=0)),
                ("viewers_can_annotate", models.BooleanField(default=False)),
                ("allow_remote_control", models.BooleanField(default=False)),
                ("is_recording", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "ice_servers",
                    models.JSONField(
                        default=list, help_text="WebRTC ICE servers configuration"
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="screen_shares",
                        to="parties.watchparty",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="screen_shares",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "interactive_screen_shares",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="InteractiveAnnotation",
            fields=[
                (
                    "annotation_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "annotation_type",
                    models.CharField(
                        choices=[
                            ("arrow", "Arrow"),
                            ("rectangle", "Rectangle"),
                            ("circle", "Circle"),
                            ("text", "Text"),
                            ("freehand", "Freehand Drawing"),
                            ("highlight", "Highlight"),
                        ],
                        max_length=20,
                    ),
                ),
                ("position_x", models.FloatField(help_text="X position (0-1)")),
                ("position_y", models.FloatField(help_text="Y position (0-1)")),
                ("width", models.FloatField(default=0.1, help_text="Width (0-1)")),
                ("height", models.FloatField(default=0.1, help_text="Height (0-1)")),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Text content for text annotations"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#FF0000", help_text="Hex color code", max_length=7
                    ),
                ),
                (
                    "stroke_width",
                    models.IntegerField(default=2, help_text="Stroke width in pixels"),
                ),
                ("is_visible", models.BooleanField(default=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When annotation expires",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "screen_share",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotations",
                        to="interactive.screenshare",
                    ),
                ),
            ],
            options={
                "db_table": "interactive_annotations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="VoiceChatRoom",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("max_participants", models.IntegerField(default=50)),
                (
                    "require_permission",
                    models.BooleanField(
                        default=False, help_text="Require host permission to join"
                    ),
                ),
                (
                    "audio_quality",
                    models.CharField(
                        choices=[
                            ("low", "Low (8kHz)"),
                            ("medium", "Medium (16kHz)"),
                            ("high", "High (32kHz)"),
                            ("ultra", "Ultra (48kHz)"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("noise_cancellation", models.BooleanField(default=True)),
                ("echo_cancellation", models.BooleanField(default=True)),
                (
                    "ice_servers",
                    models.JSONField(
                        default=list, help_text="WebRTC ICE servers configuration"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "party",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="voice_chat_room",
                        to="parties.watchparty",
                    ),
                ),
            ],
            options={
                "db_table": "interactive_voice_chat_rooms",
            },
        ),
        migrations.CreateModel(
            name="VoiceChatParticipant",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "peer_id",
                    models.CharField(help_text="WebRTC peer ID", max_length=255),
                ),
                ("is_connected", models.BooleanField(default=True)),
                ("is_muted", models.BooleanField(default=False)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("left_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="voice_chat_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="interactive.voicechatroom",
                    ),
                ),
            ],
            options={
                "db_table": "interactive_voice_chat_participants",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.AddIndex(
            model_name="interactivepoll",
            index=models.Index(
                fields=["party", "is_published"], name="interactive_party_i_38301d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interactivepoll",
            index=models.Index(
                fields=["creator", "created_at"], name="interactive_creator_7488b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interactivepoll",
            index=models.Index(
                fields=["expires_at"], name="interactive_expires_998b89_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interactivesession",
            index=models.Index(
                fields=["party", "started_at"], name="interactive_party_i_40d814_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interactivesession",
            index=models.Index(
                fields=["user", "started_at"], name="interactive_user_id_59adfc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="interactivesession",
            unique_together={("user", "party")},
        ),
        migrations.AddIndex(
            model_name="livereaction",
            index=models.Index(
                fields=["party", "created_at"], name="interactive_party_i_548815_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="livereaction",
            index=models.Index(
                fields=["video_timestamp"], name="interactive_video_t_ca7bd1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="livereaction",
            index=models.Index(
                fields=["user", "party"], name="interactive_user_id_b66404_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pollresponse",
            index=models.Index(
                fields=["poll", "created_at"], name="interactive_poll_id_5db571_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pollresponse",
            index=models.Index(
                fields=["user", "created_at"], name="interactive_user_id_91edaa_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="pollresponse",
            unique_together={("poll", "user")},
        ),
        migrations.AddIndex(
            model_name="screenshare",
            index=models.Index(
                fields=["party", "is_active"], name="interactive_party_i_124cd0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="screenshare",
            index=models.Index(
                fields=["user", "started_at"], name="interactive_user_id_93d886_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interactiveannotation",
            index=models.Index(
                fields=["screen_share", "is_visible"],
                name="interactive_screen__530d4f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="interactiveannotation",
            index=models.Index(
                fields=["user", "created_at"], name="interactive_user_id_396a9c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="voicechatparticipant",
            index=models.Index(
                fields=["room", "is_connected"], name="interactive_room_id_3c474a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="voicechatparticipant",
            index=models.Index(
                fields=["user", "joined_at"], name="interactive_user_id_060bd9_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="voicechatparticipant",
            unique_together={("room", "user")},
        ),
    ]
