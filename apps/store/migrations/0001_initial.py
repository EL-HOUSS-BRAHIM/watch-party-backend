# Generated by Django 5.0.14 on 2025-07-27 14:14

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "icon",
                    models.ImageField(blank=True, null=True, upload_to="achievements/"),
                ),
                (
                    "points",
                    models.IntegerField(
                        default=0, help_text="Points awarded when unlocked"
                    ),
                ),
                (
                    "currency_reward",
                    models.IntegerField(default=0, help_text="Virtual currency reward"),
                ),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("social", "Social"),
                            ("watching", "Watching"),
                            ("hosting", "Hosting"),
                            ("community", "Community"),
                            ("milestone", "Milestone"),
                            ("special", "Special Event"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "criteria",
                    models.JSONField(help_text="Conditions to unlock this achievement"),
                ),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_hidden",
                    models.BooleanField(
                        default=False, help_text="Hidden until unlocked"
                    ),
                ),
                ("order", models.IntegerField(default=0, help_text="Display order")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Reward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "reward_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily Reward"),
                            ("weekly", "Weekly Reward"),
                            ("challenge", "Challenge Reward"),
                            ("streak", "Streak Reward"),
                            ("milestone", "Milestone Reward"),
                        ],
                        max_length=20,
                    ),
                ),
                ("currency_amount", models.IntegerField(default=0)),
                (
                    "requirements",
                    models.JSONField(help_text="Requirements to claim this reward"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_repeatable", models.BooleanField(default=True)),
                (
                    "cooldown_hours",
                    models.IntegerField(
                        default=24, help_text="Hours before can claim again"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["reward_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="StoreItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("price", models.IntegerField(help_text="Price in virtual currency")),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("avatar", "Avatar Items"),
                            ("themes", "Themes"),
                            ("emotes", "Emotes"),
                            ("badges", "Badges"),
                            ("backgrounds", "Backgrounds"),
                            ("effects", "Special Effects"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="store/items/"),
                ),
                (
                    "icon",
                    models.ImageField(blank=True, null=True, upload_to="store/icons/"),
                ),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_limited_time", models.BooleanField(default=False)),
                ("available_until", models.DateTimeField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional item properties"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="CurrencyTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Positive for earned, negative for spent"
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("purchase", "Item Purchase"),
                            ("reward", "Reward Earned"),
                            ("achievement", "Achievement Unlocked"),
                            ("gift", "Gift Received"),
                            ("refund", "Refund"),
                            ("admin", "Admin Adjustment"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
                ("balance_after", models.IntegerField()),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="currency_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RewardItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(default=1)),
                (
                    "probability",
                    models.FloatField(
                        default=1.0, help_text="Chance to receive (0.0-1.0)"
                    ),
                ),
                (
                    "reward",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.reward"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="store.storeitem",
                    ),
                ),
            ],
            options={
                "unique_together": {("reward", "item")},
            },
        ),
        migrations.AddField(
            model_name="reward",
            name="items",
            field=models.ManyToManyField(
                blank=True, through="store.RewardItem", to="store.storeitem"
            ),
        ),
        migrations.CreateModel(
            name="UserCurrency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("balance", models.IntegerField(default=0)),
                ("total_earned", models.IntegerField(default=0)),
                ("total_spent", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="currency",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRewardClaim",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("claimed_at", models.DateTimeField(auto_now_add=True)),
                ("currency_received", models.IntegerField(default=0)),
                (
                    "items_received",
                    models.JSONField(default=list, help_text="List of items received"),
                ),
                (
                    "reward",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.reward"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_claims",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-claimed_at"],
            },
        ),
        migrations.CreateModel(
            name="UserAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("unlocked_at", models.DateTimeField(auto_now_add=True)),
                (
                    "progress_data",
                    models.JSONField(default=dict, help_text="Progress tracking data"),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="store.achievement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-unlocked_at"],
                "unique_together": {("user", "achievement")},
            },
        ),
        migrations.CreateModel(
            name="UserInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.IntegerField(default=1)),
                ("is_equipped", models.BooleanField(default=False)),
                ("purchased_at", models.DateTimeField(auto_now_add=True)),
                (
                    "metadata",
                    models.JSONField(default=dict, help_text="Item-specific user data"),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="store.storeitem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-purchased_at"],
                "unique_together": {("user", "item")},
            },
        ),
    ]
